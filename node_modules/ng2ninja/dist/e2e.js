"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = __importDefault(require("./logger"));
var utils_1 = require("./utils");
var RESULT_FILE = 'results/protractor-results.json';
function warnUserOnFailure() {
    logger_1.default.error('Error while running end-to-end tests.');
    logger_1.default.error('Check if your app is running with no error in the browser console,');
    logger_1.default.error('and try to launch the tests using `ng e2e`.');
}
function handleProtractorResults(data) {
    var results = JSON.parse(data);
    var passed = 0;
    var failed = 0;
    for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
        var spec = results_1[_i];
        for (var _a = 0, _b = spec.assertions; _a < _b.length; _a++) {
            var assertion = _b[_a];
            if (assertion.passed) {
                passed++;
            }
            else {
                failed++;
                if (assertion.errorMsg.indexOf('Angular could not be found on the page') !== -1) {
                    warnUserOnFailure();
                }
            }
        }
    }
    var protractorResults = { success: passed, failed: failed };
    if (failed) {
        logger_1.default.warn('Looks like you have ' + failed + ' e2e tests failing.');
        logger_1.default.warn('Try to launch the tests using `ng e2e`.');
        logger_1.default.warn("E2e tests score: " + Math.round(passed * 100 / (passed + failed)) + "%");
    }
    else {
        logger_1.default.success('E2e tests score: 100%');
    }
    return protractorResults;
}
var e2e = function (options) { return new Promise(function (resolve, reject) {
    logger_1.default.log('Starting end to end tests...');
    // protractor exit code is 1 if a test fail
    // so we'll go into the error handler even if the execution went well
    // and we try to read the results in both cases
    return utils_1.exec('ng e2e --port 4201')
        .then(function () { return utils_1.readFile(RESULT_FILE); }, function (error) {
        logger_1.default.debug(options, 'Error while running e2e was: ', error);
        return utils_1.readFile(RESULT_FILE);
    })
        .then(function (data) { return handleProtractorResults(data); })
        .then(function (results) { return resolve(results); }, function (error) {
        logger_1.default.debug(options, 'Error while reading e2e results: ', error);
        warnUserOnFailure();
        return reject();
    });
}); };
exports.default = e2e;
