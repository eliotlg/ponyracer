"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = __importDefault(require("./logger"));
var utils_1 = require("./utils");
var BASE_PATH = 'https://angular-exercises.ninja-squad.com';
var LOCALHOST = 'http://localhost:8080';
function storeCredentials(metadata, token) {
    logger_1.default.success('Authentication success');
    metadata.token = token;
    return metadata;
}
function login(options, loginAttempts, metadata) {
    // eslint-disable-next-line no-param-reassign
    loginAttempts = loginAttempts + 1;
    if (loginAttempts > 3) {
        logger_1.default.error('Aborting authentication after 3 failures');
        return Promise.reject();
    }
    var schema = {
        properties: {
            email: {
                required: true
            },
            password: {
                hidden: true,
                required: true
            }
        }
    };
    return utils_1.prompt(schema)
        .then(function (result) { return utils_1.post((options['local-server'] ? LOCALHOST : BASE_PATH) + "/api/authentications", result); })
        .then(function (_a) {
        var response = _a.response, body = _a.body;
        if (response.statusCode !== 201) {
            logger_1.default.error('Authentication failed, try again.');
            logger_1.default.debug(options, 'Authentication request returned with status: ', response.statusCode);
            return login(options, loginAttempts, metadata);
        }
        logger_1.default.debug(options, 'Authentication succeeded and we can store credentials');
        return storeCredentials(metadata, body.token);
    }, function (error) {
        logger_1.default.error('Authentication failed, try again.');
        logger_1.default.debug(options, 'An error occurred during authentication: ', error);
        return login(options, loginAttempts, metadata);
    });
}
function computeScore(metadata, results, options) {
    var score = 100 - results.karma.failed * 5 - results.tslint.errors
        - (results.coverage.total - results.coverage.covered) - results.e2e.failed;
    if (score < 10) {
        score = 10;
    }
    if (options.local) {
        // if we are running locally we want to return a failure
        if (score !== 100) {
            logger_1.default.error('Score is not perfect! ' + score + '%');
            utils_1.exitProcessWithError(1);
        }
        logger_1.default.success('Exercise score: ' + score + '%');
    }
    else if (score !== 100) {
        logger_1.default.warn('Score is not perfect yet: ' + score + '%');
    }
    else {
        logger_1.default.success('Perfect score, congrats! ' + score + '%');
    }
    return { metadata: metadata, score: score };
}
function postScore(options, metadata) {
    var headers = { Authorization: "Bearer: " + metadata.token };
    var path = options['local-server'] ? LOCALHOST : BASE_PATH;
    var bodyToSubmit = { score: metadata.score };
    return utils_1.post(path + "/api/packs/" + metadata.pack + "/exercises/" + metadata.id + "/scores", bodyToSubmit, headers)
        .then(function (_a) {
        var response = _a.response, body = _a.body;
        // if authentication error
        if (response.statusCode === 401) {
            logger_1.default.error('Authentication failed. Please enter your credentials again.');
            var loginAttempts = 0;
            // we try to reconnect 3 times
            // then submit or fail
            return login(options, loginAttempts, metadata)
                .then(function (updatedMetadata) { return postScore(options, updatedMetadata); }, function (error) {
                logger_1.default.error('Error while authenticating to submit results.');
                logger_1.default.debug(options, 'Error was: ', error);
                return Promise.reject();
            });
        }
        else if (response.statusCode !== 201) {
            logger_1.default.error('Error while sending the results.');
            logger_1.default.debug(options, response.statusCode, body);
            return Promise.reject();
        }
        logger_1.default.log('Score submitted.');
        return Promise.resolve(metadata);
    }, function (error) {
        logger_1.default.error('Error while sending the results.');
        logger_1.default.error('Maybe check your connection?');
        logger_1.default.debug(options, 'Error while sending the result was: ', error);
        return Promise.reject();
    });
}
var submitResults = function (results, options) { return utils_1.readFile('./exercise.json')
    .then(function (data) { return JSON.parse(data); }, function (error) {
    logger_1.default.error('Looks like you have no exercise.json file.');
    logger_1.default.debug(options, 'An error occurred while reading exercise.json: ', error);
    return Promise.reject();
})
    .then(function (metadata) { return computeScore(metadata, results, options); }, function (error) {
    logger_1.default.error('Looks like you have an incorrect JSON in the exercise.json file.');
    logger_1.default.debug(options, 'An error occurred while parsing exercise.json: ', error);
    return Promise.reject();
})
    .then(function (_a) {
    var metadata = _a.metadata, score = _a.score;
    metadata.score = score;
    var loginAttempts = 0;
    if (options.local) {
        return metadata;
    }
    return login(options, loginAttempts, metadata);
})
    .then(function (metadata) {
    if (!options.local) {
        return postScore(options, metadata);
    }
    return metadata;
}); };
exports.default = submitResults;
