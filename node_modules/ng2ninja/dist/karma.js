"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var logger_1 = __importDefault(require("./logger"));
var RESULT_FILE = 'results/karma-results.json';
function computeScore(karmaResults) {
    // eslint-disable-next-line no-undefined
    if (karmaResults.failed === undefined) {
        return 0;
    }
    var score = 100 - karmaResults.failed * 5;
    return score >= 0 ? score : 0;
}
function warnUserThatSomeTestsFailed(karmaResults) {
    var score = computeScore(karmaResults);
    logger_1.default.warn('Unit tests score: ' + score + '%');
    logger_1.default.warn('Looks like you have ' + (karmaResults.failed ? karmaResults.failed : 'a few') + ' unit test(s) failing.');
    logger_1.default.warn('Launch `ng test` and try to fix them.');
}
function warnUserThatKarmaFailed(reject) {
    logger_1.default.error('Error while running unit tests.');
    logger_1.default.error('Maybe you code doesn\'t compile?');
    logger_1.default.error('Launch `ng test` to see more.');
    return reject();
}
function handleKarmaResults(data, options, resolve, reject) {
    var results = JSON.parse(data);
    logger_1.default.debug(options, results);
    if (results.summary.error || results.summary.exitCode === 1) {
        logger_1.default.error('An error occurred during the unit tests.');
        logger_1.default.error('Run `ng test` to see the problem.');
        return reject();
    }
    var karmaResults = { success: results.summary.success, failed: results.summary.failed };
    if (karmaResults.failed !== 0) {
        warnUserThatSomeTestsFailed(karmaResults);
    }
    else {
        logger_1.default.success('Unit tests score: 100%');
    }
    return resolve(karmaResults);
}
var karma = function (options) { return new Promise(function (resolve, reject) {
    logger_1.default.log('Starting unit tests...');
    // karma exit code is 1 if a test fail
    // so we'll go into the error handler even if the execution went well
    // and we try to read the results in both cases
    return utils_1.exec('ng test --watch=false --code-coverage')
        .then(function () { return utils_1.readFile(RESULT_FILE); }, function (error) {
        logger_1.default.debug(options, 'Karma test failed', error);
        return utils_1.readFile(RESULT_FILE);
    })
        // if results, great we handle them
        // if not we warn the user
        .then(function (data) { return handleKarmaResults(data, options, resolve, reject); }, function (error) {
        logger_1.default.debug(options, 'An error occurred while reading karma results: ', error);
        return warnUserThatKarmaFailed(reject);
    });
}); };
exports.default = karma;
