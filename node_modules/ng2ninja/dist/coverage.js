"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = __importDefault(require("./logger"));
var utils_1 = require("./utils");
var RESULT_FILE = 'coverage/ponyracer/coverage-summary.json';
function computeScore(coverageResults) {
    return 100 + coverageResults.covered - coverageResults.total;
}
function handleCoverageResults(data, resolve) {
    // temporary workaround for https://github.com/istanbuljs/istanbul-reports/pull/20/files:
    // the file paths are not properly encoded in the JSON, and so we transform backslashes to slashes.
    // since everything else in the file is just hard-coded keys and numbers, this should work fine.
    var dataEncoded = data.replace(/\\/g, '/');
    var results = JSON.parse(dataEncoded);
    var coverageResults = { covered: results.total.lines.covered, total: results.total.lines.total };
    var score = computeScore(coverageResults);
    if (score !== 100) {
        logger_1.default.warn('Code coverage score: ' + score + '%');
        logger_1.default.warn('Looks like you don\'t have a perfect code coverage.');
        logger_1.default.warn('Maybe you skipped/deleted some unit tests?');
        logger_1.default.warn('Or maybe you added some code to try something, and this is not covered by a unit test?');
        logger_1.default.warn('To have more info open `coverage/ponyracer/index.html`');
        logger_1.default.warn('You should see which file has a problem.');
    }
    else {
        logger_1.default.success('Code coverage score: 100%');
    }
    resolve(coverageResults);
}
var coverage = function (options) { return new Promise(function (resolve, reject) {
    logger_1.default.log('Starting code coverage...');
    return utils_1.readFile(RESULT_FILE)
        .then(function (data) { return handleCoverageResults(data, resolve); }, function (error) {
        logger_1.default.error('Error while reading the code coverage results. Try to run `ng test --watch=false --code-coverage`.');
        logger_1.default.debug(options, 'Error while reading the code coverage results was: ', error);
        reject();
    });
}); };
exports.default = coverage;
