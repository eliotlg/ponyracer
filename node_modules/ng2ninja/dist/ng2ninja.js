#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var command_line_args_1 = __importDefault(require("command-line-args"));
var rimraf_1 = __importDefault(require("rimraf"));
var karma_1 = __importDefault(require("./karma"));
var hash_checker_1 = __importDefault(require("./hash-checker"));
var coverage_1 = __importDefault(require("./coverage"));
var tslint_1 = __importDefault(require("./tslint"));
var e2e_1 = __importDefault(require("./e2e"));
var submit_results_1 = __importDefault(require("./submit-results"));
var logger_1 = __importDefault(require("./logger"));
// parse cli options
var options = command_line_args_1.default([
    { name: 'local', type: Boolean },
    { name: 'local-server', type: Boolean },
    { name: 'verbose', type: Boolean },
    { name: 'skip-check', type: Boolean }
]);
// clean up the directory
rimraf_1.default.sync('results/*');
var results = {};
hash_checker_1.default(options)
    .then(function (exercise) { return results.exercise = exercise; })
    .then(function () { return logger_1.default.debug(options, 'Exercise: ', results.exercise.title); })
    .then(function () { return karma_1.default(options); })
    .then(function (karmaResults) { return results.karma = karmaResults; })
    .then(function () { return logger_1.default.debug(options, 'Karma results: ', results.karma); })
    .then(function () { return coverage_1.default(options); })
    .then(function (coverageResults) { return results.coverage = coverageResults; })
    .then(function () { return logger_1.default.debug(options, 'Coverage results: ', results.coverage); })
    .then(function () { return tslint_1.default(options); })
    .then(function (tslintResults) { return results.tslint = tslintResults; })
    .then(function () { return logger_1.default.debug(options, 'Linter results: ', results.tslint); })
    .then(function () { return e2e_1.default(options); })
    .then(function (e2eResults) { return results.e2e = e2eResults; })
    .then(function () { return logger_1.default.debug(options, 'E2e results: ', results.e2e); })
    .then(function () { return submit_results_1.default(results, options); })
    .catch(function (error) {
    logger_1.default.error('Try to fix it and retry!');
    if (options.verbose) {
        logger_1.default.error(error);
    }
    if (options.local) {
        logger_1.default.error('Running locally, we exit');
        process.exit(1);
    }
});
